(()=>{"use strict";var e={n:t=>{var s=t&&t.__esModule?()=>t.default:()=>t;return e.d(s,{a:s}),s},d:(t,s)=>{for(var i in s)e.o(s,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:s[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};const t=require("assert");var s=e.n(t);const i=require("fs");var r=e.n(i);const a=require("mkdirp");var n=e.n(a);const c=require("child_process"),o=require("events"),d=require("byline");var u=e.n(d);const p=require("path");var l=e.n(p);const h=require("fflate-unzip");var m=e.n(h);const f=require("find");class g extends o.EventEmitter{constructor(e){super(),this.dir=e}async loadPackages(e){await this._plugins,Array.isArray(e)||(e=[e]);for(let t of e)try{await this.unzip(t),this.emit("message",{data:["LibProgress",{uri:t,done:!0}]})}catch(e){this.emit("message",{data:["LibError",t,""+e]})}this.emit("message",{data:["LoadedPkg",e]})}async unzip(e){var t=await(await fetch(e)).arrayBuffer();return m()(t,{to:{directory:this.dir}})}appropriatePlugins(e){var t=l().join(e,"coqlib","plugins");return n().sync(this.dir),this._plugins=new Promise(((e,s)=>f.eachfile(/\.cmxs$/,t,(e=>{try{this.ln_sf(e,l().join(this.dir,l().basename(e)))}catch(e){this.emit("message",{data:["LibError","<native>",""+e]})}})).end(e)))}ln_sf(e,t){try{r().unlinkSync(t)}catch{}r().symlinkSync(e,t)}}class v extends o.EventEmitter{constructor(e,t,s){super(),this.cp=(0,c.spawn)(e,t,s),u()(this.cp.stdout).on("data",(e=>{try{for(let t of JSON.parse(e))this.emit("message",{data:t})}catch(t){console.error("(from subprocess)",t,e.toString("utf-8"))}})),setTimeout((()=>this.emit("message",{data:["Boot"]})),0)}end(){this.cp.stdin.end()}terminate(){this.cp.kill("SIGINT")}addEventListener(e,t){this.on(e,t)}removeEventListener(e,t){this.off(e,t)}postMessage(e){switch(e[0]){case"Put":return void this.putFile(e[1],e[2])}"string"!=typeof e&&(e=JSON.stringify(e)),this.cp.stdin.write(e+"\n")}putFile(e,t){n().sync(e.replace(/[/][^/]+$/,"")),r().writeFileSync(e,t)}}class y extends v{constructor(e={}){e={...y.DEFAULT_OPTIONS,...e};var t=y.findBinDir(),[s,i]=y.findExecutable(t,e.mode);super(s,[...i,"-stdin"],{cwd:e.cwd,env:{PATH:process.env.PATH,CAML_LD_LIBRARY_PATH:[t,process.env.CAML_LD_LIBRARY_PATH||""].join(":")}}),this.binDir=t,this.packages=new g("/tmp/wacoq/lib"),this.packages.on("message",(e=>this.emit("message",e))),this.packages.appropriatePlugins(this.binDir)}postMessage(e){switch(e[0]){case"LoadPkg":return void this.packages.loadPackages(e[1])}super.postMessage(e)}static findBinDir(){var e=global.require("find-up").sync("bin/coq",{cwd:__dirname,type:"directory"});return s()(e,"bin/coq not found"),e}static findExecutable(e,t){var i=`${e}/../icoq.bc`,a=`${e}/../icoq.exe`;switch(t){case"byte":return["ocamlrun",[i]];case"native":return[a,[]];case"best":return r().existsSync(a)?[a,[]]:["ocamlrun",[i]];default:s()(!1,`invalid mode '${t}'`)}}}y.DEFAULT_OPTIONS={mode:"best",cwd:"/tmp/wacoq"}})();