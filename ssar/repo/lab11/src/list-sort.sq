qualifier {x <= y, x != y}

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs

data SList a where
	SNil :: SList a
	SCons :: x: a -> xs: SList {a | x <= _v} -> SList a

	
// Inserts an element into a sorted list
insert ::  ....
insert = ??


// insertionSort :: .....